import React, { useEffect, useRef } from 'react';
import Svg, { Path, Circle } from 'react-native-svg';
import { Colors } from './Constants';
import { Animated, Easing } from 'react-native';

export interface SvgProps {
  width?: number | string;
  height?: number | string;
  stroke?: string;
  fill?: string;
}

export const CheckIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;
  const stroke = props.stroke || '#000';

  return (
    <Svg width={width} height={height} viewBox="0 0 72 53" fill="none">
      <Path d="M8.44858 25.0507C8.44858 25.0507 26.1073 44.5681 27.2013 44.7327C28.2952 44.8973 63.8307 8.6442 63.8307 8.6442" stroke={stroke} strokeWidth="16" strokeLinecap="round" />
    </Svg>
  )
}
export const PlusIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;
  const fill = props.fill || '#000';

  return (
    <Svg width={width} height={height} viewBox="0 0 64 64" fill="none">
      <Path
        d="M56 24H40V8C40 5.87827 39.1571 3.84344 37.6569 2.34315C36.1566 0.842854 34.1217 0 32 0C29.8783 0 27.8434 0.842854 26.3431 2.34315C24.8429 3.84344 24 5.87827 24 8L24.284 24H8C5.87827 24 3.84344 24.8429 2.34315 26.3431C0.842854 27.8434 0 29.8783 0 32C0 34.1217 0.842854 36.1566 2.34315 37.6569C3.84344 39.1571 5.87827 40 8 40L24.284 39.716L24 56C24 58.1217 24.8429 60.1566 26.3431 61.6569C27.8434 63.1571 29.8783 64 32 64C34.1217 64 36.1566 63.1571 37.6569 61.6569C39.1571 60.1566 40 58.1217 40 56V39.716L56 40C58.1217 40 60.1566 39.1571 61.6569 37.6569C63.1571 36.1566 64 34.1217 64 32C64 29.8783 63.1571 27.8434 61.6569 26.3431C60.1566 24.8429 58.1217 24 56 24Z"
        fill={fill}
      />
    </Svg>
  );
};

export const SettingsIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;
  const fill = props.fill || '#000';

  return (
    <Svg width={width} height={height} viewBox="0 0 65 61" fill="none">
      <Path fillRule="evenodd" clipRule="evenodd" d="M25.6209 0.937406C24.9804 0.468641 24.2347 0.164016 23.4492 0.0501938C22.6636 -0.0636283 21.8622 0.016822 21.1149 0.284503C17.6211 1.56511 14.376 3.44232 11.524 5.83257C10.9198 6.34552 10.4504 6.99854 10.1566 7.73464C9.86284 8.47074 9.75369 9.26755 9.83867 10.0555C10.0799 12.4774 9.65213 14.8156 8.48784 16.829C7.32677 18.8456 5.51279 20.3862 3.29356 21.3865C2.56764 21.7077 1.93152 22.202 1.44091 22.8261C0.95029 23.4501 0.620128 24.1849 0.479323 24.9662C-0.159774 28.6265 -0.159774 32.3698 0.479323 36.0302C0.778436 37.7573 1.95881 39.0084 3.29356 39.6131C5.51279 40.6101 7.32677 42.1539 8.49106 44.1673C9.65213 46.1839 10.0799 48.5189 9.83867 50.9408C9.69394 52.3945 10.1828 54.0413 11.524 55.1638C14.376 57.554 17.6211 59.4312 21.1149 60.7118C21.8617 60.9789 22.6626 61.0591 23.4475 60.9453C24.2324 60.8315 24.9775 60.5272 25.6177 60.0589C27.5957 58.6373 29.8375 57.8365 32.166 57.8365C34.4946 57.8365 36.7331 58.6373 38.7112 60.0589C39.9012 60.9145 41.5736 61.3133 43.2171 60.7118C46.711 59.4312 49.9561 57.554 52.8081 55.1638C54.1493 54.0413 54.6413 52.3978 54.4934 50.9408C54.2522 48.5189 54.6767 46.1807 55.8442 44.1673C57.0053 42.1507 58.8193 40.6133 61.0385 39.6131C62.37 39.0116 63.5536 37.7573 63.8527 36.0302C64.4918 32.3698 64.4918 28.6265 63.8527 24.9662C63.7119 24.1849 63.3818 23.4501 62.8912 22.8261C62.4005 22.202 61.7644 21.7077 61.0385 21.3865C58.8193 20.3862 57.0053 18.8456 55.841 16.829C54.6767 14.8156 54.2522 12.4774 54.4934 10.0555C54.5784 9.26755 54.4692 8.47074 54.1755 7.73464C53.8817 6.99854 53.4122 6.34552 52.8081 5.83257C49.9561 3.44232 46.711 1.56511 43.2171 0.284503C42.4703 0.0173802 41.6695 -0.0627761 40.8846 0.051038C40.0996 0.164852 39.3545 0.469173 38.7144 0.937406C36.7331 2.35578 34.4914 3.15985 32.166 3.15985C29.8407 3.15985 27.5989 2.359 25.6209 0.937406ZM22.5172 30.4982C22.5172 27.9391 23.5338 25.4849 25.3433 23.6754C27.1528 21.8659 29.607 20.8493 32.166 20.8493C34.7251 20.8493 37.1793 21.8659 38.9888 23.6754C40.7983 25.4849 41.8149 27.9391 41.8149 30.4982C41.8149 33.0572 40.7983 35.5114 38.9888 37.3209C37.1793 39.1304 34.7251 40.147 32.166 40.147C29.607 40.147 27.1528 39.1304 25.3433 37.3209C23.5338 35.5114 22.5172 33.0572 22.5172 30.4982Z" fill={fill} />
    </Svg>
  );
};

export const LocateIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;

  return (
    <Svg width={width} height={height} viewBox="0 0 76 76" fill="none">
      <Path d="M38 12.4V6M38 70V63.6M63.6 38H70M6 38H12.4M38 14.96C33.4431 14.96 28.9886 16.3113 25.1997 18.8429C21.4108 21.3746 18.4577 24.973 16.7138 29.183C14.97 33.393 14.5137 38.0256 15.4027 42.4949C16.2917 46.9642 18.4861 51.0695 21.7083 54.2917C24.9305 57.5139 29.0358 59.7083 33.5051 60.5973C37.9744 61.4863 42.607 61.03 46.817 59.2862C51.027 57.5423 54.6254 54.5892 57.1571 50.8003C59.6887 47.0114 61.04 42.5569 61.04 38C61.04 31.8894 58.6126 26.0291 54.2917 21.7083C49.9709 17.3874 44.1106 14.96 38 14.96Z" stroke={props.stroke || '#000'} strokeWidth="12" strokeLinecap="round" strokeLinejoin="round" />
    </Svg>
  );
};

export const PersonIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;
  const fill = props.fill || '#000';

  return (
    <Svg width={width} height={height} viewBox="0 0 47 56" fill="none">
      <Path d="M0.270934 43.7339C-0.0523114 44.6014 -0.0872794 45.55 0.171217 46.439C0.429713 47.328 0.967902 48.1099 1.70593 48.6689C7.83555 53.4331 15.3801 56.0148 23.1434 56.0049C31.2284 56.0049 38.6764 53.2609 44.6019 48.6549C46.1069 47.4894 46.7159 45.4944 46.0299 43.7199C44.2528 39.093 41.1144 35.1137 37.029 32.3072C32.9436 29.5007 28.1033 27.9989 23.1468 28C18.1903 28.0011 13.3507 29.5052 9.26662 32.3135C5.18253 35.1219 2.04599 39.1027 0.270934 43.7304" fill={fill} />
      <Circle cx="23" cy="12" r="12" fill={fill} />
    </Svg>
  )
};

export const AskIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;
  const fill = props.fill || '#000';

  return (
    <Svg width={width} height={height} viewBox="0 0 65 65" fill="none">
      <Path d="M33 0C15.3269 0 1 14.3269 1 32C1 49.6731 15.3269 64 33 64C50.6731 64 65 49.6731 65 32C65 14.3269 50.6731 0 33 0ZM32.4219 8.01952C36.3051 8.02891 39.425 9.2568 41.6015 11.5039C43.7781 13.751 44.7762 16.5109 44.7969 19.2734C44.7698 22.1846 44.5475 23.5249 42.2069 27.043C39.8663 30.5611 33.9817 35.652 35.0937 41.3672L30.6015 41.2891C28.6117 37.2853 29.1173 32.4691 30.6327 29.2813C32.1482 26.0934 33.284 25.0691 34.5156 22.1211C35.7471 19.1732 32.8291 15.8427 30.1679 15.8203C27.5067 15.7978 26.493 16.8965 25.6601 18.7773H22.0156C21.7008 18.5955 21.022 18.393 21.246 15.0702C21.4701 11.7476 28.5387 8.01013 32.4219 8.01952ZM32.6484 45.0938C35.6531 45.0938 38.082 47.5266 38.082 50.5313C38.082 53.5359 35.6531 55.9805 32.6484 55.9805C29.6437 55.9805 27.2109 53.5359 27.2109 50.5313C27.2109 47.5266 29.6437 45.0938 32.6484 45.0938Z" fill={fill} />
      <Path d="M8.00002 47L23 60C23 60 16.5 62.5 12.5 63.5C8.50001 64.5 2 64.5 1 63.5C0 62.5 4.00001 58.5 5.50001 55C7.00001 51.5 8.00002 47 8.00002 47Z" fill={fill} />
    </Svg>
  )
}

export const FeatherPenIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;
  const fill = props.fill || '#000';

  return (
    <Svg width={width} height={height} viewBox="0 0 58 64" fill="none">
      <Path d="M57.6 0C9.6 0 3.2 44.8 0 64H6.3936C8.5248 53.3333 13.8603 47.4667 22.4 46.4C35.2 44.8 44.8 33.6 48 24L43.2 20.8L46.4 17.6C49.6 14.4 52.8128 9.6 57.6 0Z" fill={fill} />
    </Svg>
  )
}

export const ChevronDownIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;
  const fill = props.fill || '#000';

  return (
    <Svg width={width} height={height} viewBox="0 0 24 24" fill="none">
      <Path
        d="M6 9L12 15L18 9"
        stroke={fill}
        strokeWidth="4"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </Svg>
  );
};

export const ThumbsUpIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;
  const fill = props.fill || '#000';

  return (
    <Svg width={width} height={height} viewBox="0 0 24 24" fill="none">
      <Path fillRule="evenodd" clipRule="evenodd" d="M8.993 5.16299C9.162 6.58599 8.931 8.06999 8.417 9.40199C7.848 10.876 7.092 12.472 6.998 14.059C6.919 15.396 7.222 16.978 8.03 18.061C8.915 19.247 10.368 20 11.967 20H13.479C14.7333 20.0001 15.9418 19.5287 16.8648 18.6794C17.7878 17.8301 18.3579 16.665 18.462 15.415L18.823 11.083C18.8345 10.9451 18.8172 10.8064 18.7723 10.6755C18.7274 10.5446 18.6559 10.4245 18.5622 10.3227C18.4685 10.2209 18.3546 10.1397 18.2279 10.0841C18.1012 10.0286 17.9644 9.99993 17.826 9.99999H12.5C11.669 9.99999 11.005 9.32699 10.999 8.50799C10.991 7.53799 11.052 6.34099 10.606 5.44799C10.206 4.64799 9.832 4.49999 9.5 4.49999C9.2 4.49999 8.96 4.89299 8.993 5.16299ZM9.5 2.49999C10.856 2.49999 11.794 3.35199 12.395 4.55299C12.917 5.59699 12.966 6.85299 12.992 7.99999H17.826C18.2411 7.99993 18.6516 8.08601 19.0317 8.25277C19.4118 8.41953 19.7532 8.66336 20.0342 8.96882C20.3153 9.27429 20.5298 9.63475 20.6644 10.0274C20.799 10.4201 20.8506 10.8364 20.816 11.25L20.455 15.581C20.3093 17.3309 19.5112 18.9621 18.219 20.1511C16.9268 21.3401 15.235 22 13.479 22H11.967C11.0183 22.0024 10.0792 21.8103 9.20773 21.4355C8.33622 21.0607 7.55081 20.5112 6.9 19.821C6.443 19.9409 5.97246 20.0014 5.5 20.001C4.392 20.001 3.472 19.379 2.876 18.391C2.296 17.431 2 16.107 2 14.501C2 12.895 2.297 11.569 2.876 10.609C3.472 9.61999 4.392 8.99999 5.5 8.99999C5.781 8.99999 6.079 9.04999 6.377 9.13399C6.835 7.93399 7.161 6.69699 7.007 5.39899C6.835 3.95399 8.016 2.49999 9.5 2.49999ZM5.696 11.024C5.211 10.924 4.831 11.24 4.589 11.642C4.263 12.182 4 13.106 4 14.5C4 15.894 4.263 16.819 4.588 17.359C4.898 17.871 5.228 18 5.5 18C5.564 18 5.62733 17.9983 5.69 17.995C5.154 16.787 4.924 15.255 5.002 13.941C5.049 13.136 5.363 12.023 5.696 11.024Z" fill={fill} />
    </Svg>
  )
}

export const PrettyLoadingIcon = (props: SvgProps) => {
  const width = props.width || 24;
  const height = props.height || 24;
  const stroke = props.stroke || Colors.primary;
  
  // Create rotation animation
  const spinValue = useRef(new Animated.Value(0)).current;
  
  // Set up animation on mount
  useEffect(() => {
    const startAnimation = () => {
      spinValue.setValue(0);
      Animated.timing(spinValue, {
        toValue: 1,
        duration: 1000,
        easing: Easing.linear,
        useNativeDriver: true,
      }).start(() => startAnimation());
    };
    
    startAnimation();
    
    // Clean up animation when component unmounts
    return () => {
      spinValue.stopAnimation();
    };
  }, []);
  
  // Calculate rotation based on animation value
  const spin = spinValue.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg'],
  });
  
  return (
    <Animated.View style={{ transform: [{ rotate: spin }] }}>
      <Svg width={width} height={height} viewBox="0 0 24 24" fill="none">
        <Circle 
          cx="12" 
          cy="12" 
          r="10" 
          stroke={stroke} 
          strokeWidth="4" 
          strokeLinecap="round" 
          strokeOpacity="0" 
        />
        <Path 
          d="M12 2C13.3132 2 14.6136 2.25866 15.8268 2.76121C17.0401 3.26375 18.1425 4.00035 19.0711 4.92893C19.9997 5.85752 20.7362 6.95991 21.2388 8.17317C21.7413 9.38642 22 10.6868 22 12"
          stroke={stroke} 
          strokeWidth="4" 
          strokeLinecap="round" 
        />
      </Svg>
    </Animated.View>
  );
}